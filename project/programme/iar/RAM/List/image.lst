###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       25/Jan/2018  20:01:47
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\K60_CAR_2018\lib\peripheral\image.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EW7EE1.tmp
#        (F:\K60_CAR_2018\lib\peripheral\image.c -D LPLD_K60 -D USE_K60DZ10
#        -lCN F:\K60_CAR_2018\project\programme\iar\RAM\List -lB
#        F:\K60_CAR_2018\project\programme\iar\RAM\List -o
#        F:\K60_CAR_2018\project\programme\iar\RAM\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\K60_CAR_2018\project\programme\iar\..\app\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\CPU\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\common\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\HW\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\DEV\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\FUNC\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\uCOS-II\Ports\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\uCOS-II\Source\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\FatFs\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\FatFs\option\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\common\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\driver\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\descriptor\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\class\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\peripheral\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  F:\K60_CAR_2018\project\programme\iar\RAM\List\image.lst
#    Object file  =  F:\K60_CAR_2018\project\programme\iar\RAM\Obj\image.o
#
###############################################################################

F:\K60_CAR_2018\lib\peripheral\image.c
      1          #include "image.h"
      2          #ifdef LPLD_K60
      3          #include "common.h"
      4          #else
      5          #include <stdio.h>
      6          #include <stdlib.h>
      7          #include <string.h>
      8          #include <assert.h>
      9          #define ASSERT(x) assert(x)
     10          #endif

   \                                 In section .text, align 2, keep-with-next
     11          void image__ctor(image_t * img, int16_t nrows, int16_t ncols)
     12          {
   \                     image__ctor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     13          	ASSERT(img->nrows == 0 && img->ncols == 0 && img->data == 0);
   \   00000008   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD106             BNE.N    ??image__ctor_0
   \   00000010   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD102             BNE.N    ??image__ctor_0
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??image__ctor_1
   \                     ??image__ctor_0: (+1)
   \   0000001E   0x210D             MOVS     R1,#+13
   \   00000020   0x....             LDR.N    R0,??DataTable4
   \   00000022   0x.... 0x....      BL       assert_failed
     14          	img->nrows = nrows;
   \                     ??image__ctor_1: (+1)
   \   00000026   0x8025             STRH     R5,[R4, #+0]
     15          	img->ncols = ncols;
   \   00000028   0x8066             STRH     R6,[R4, #+2]
     16          	img->data = malloc(sizeof(uint8_t) * nrows * ncols);
   \   0000002A   0xFB15 0xF006      SMULBB   R0,R5,R6
   \   0000002E   0x.... 0x....      BL       malloc
   \   00000032   0x6060             STR      R0,[R4, #+4]
     17          }
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
     18          

   \                                 In section .text, align 2, keep-with-next
     19          void image__dtor(image_t *img){
   \                     image__dtor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     20          	ASSERT(img->nrows && img->ncols && img->data);
   \   00000004   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??image__dtor_0
   \   0000000C   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD002             BEQ.N    ??image__dtor_0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD103             BNE.N    ??image__dtor_1
   \                     ??image__dtor_0: (+1)
   \   0000001A   0x2114             MOVS     R1,#+20
   \   0000001C   0x....             LDR.N    R0,??DataTable4
   \   0000001E   0x.... 0x....      BL       assert_failed
     21          	img->nrows = 0;
   \                     ??image__dtor_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x8020             STRH     R0,[R4, #+0]
     22          	img->ncols = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x8060             STRH     R0,[R4, #+2]
     23          	free(img->data);
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x.... 0x....      BL       free
     24          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void compressed__ctor(compressed_t * img, int16_t nrows, int16_t ncols)
     27          {
   \                     compressed__ctor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     28          	ASSERT(img->nrows == 0 && img->ncols == 0 && img->data == 0);
   \   00000008   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD106             BNE.N    ??compressed__ctor_0
   \   00000010   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD102             BNE.N    ??compressed__ctor_0
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??compressed__ctor_1
   \                     ??compressed__ctor_0: (+1)
   \   0000001E   0x211C             MOVS     R1,#+28
   \   00000020   0x....             LDR.N    R0,??DataTable4
   \   00000022   0x.... 0x....      BL       assert_failed
     29          	img->nrows = nrows;
   \                     ??compressed__ctor_1: (+1)
   \   00000026   0x8025             STRH     R5,[R4, #+0]
     30          	img->ncols = ncols;
   \   00000028   0x8066             STRH     R6,[R4, #+2]
     31          	img->data = malloc(sizeof(uint8_t) * nrows * ncols / 8);
   \   0000002A   0xFB15 0xF006      SMULBB   R0,R5,R6
   \   0000002E   0x08C0             LSRS     R0,R0,#+3
   \   00000030   0x.... 0x....      BL       malloc
   \   00000034   0x6060             STR      R0,[R4, #+4]
     32          }
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     33          void compressed__dtor(compressed_t * img)
     34          {
   \                     compressed__dtor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     35          	ASSERT(img->nrows && img->ncols && img->data);
   \   00000004   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??compressed__dtor_0
   \   0000000C   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD002             BEQ.N    ??compressed__dtor_0
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD103             BNE.N    ??compressed__dtor_1
   \                     ??compressed__dtor_0: (+1)
   \   0000001A   0x2123             MOVS     R1,#+35
   \   0000001C   0x....             LDR.N    R0,??DataTable4
   \   0000001E   0x.... 0x....      BL       assert_failed
     36          	img->nrows = 0;
   \                     ??compressed__dtor_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x8020             STRH     R0,[R4, #+0]
     37          	img->ncols = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x8060             STRH     R0,[R4, #+2]
     38          	free(img->data);
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x.... 0x....      BL       free
     39          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void image__uncompress(compressed_t * com, image_t * img)
     42          {
   \                     image__uncompress: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
     43          	uint16_t row, col, rstep, cstep;
     44          	
     45          	if(com->nrows > img->nrows) rstep = com->nrows / img->nrows; else rstep = 1;
   \   00000004   0xF9B1 0x2000      LDRSH    R2,[R1, #+0]
   \   00000008   0xF9B0 0x3000      LDRSH    R3,[R0, #+0]
   \   0000000C   0x429A             CMP      R2,R3
   \   0000000E   0xDA06             BGE.N    ??image__uncompress_0
   \   00000010   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000014   0xF9B1 0x3000      LDRSH    R3,[R1, #+0]
   \   00000018   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   0000001C   0xE000             B.N      ??image__uncompress_1
   \                     ??image__uncompress_0: (+1)
   \   0000001E   0x2301             MOVS     R3,#+1
     46          	if(com->ncols > img->ncols) cstep = com->ncols / img->ncols; else cstep = 1;
   \                     ??image__uncompress_1: (+1)
   \   00000020   0xF9B1 0x2002      LDRSH    R2,[R1, #+2]
   \   00000024   0xF9B0 0x4002      LDRSH    R4,[R0, #+2]
   \   00000028   0x42A2             CMP      R2,R4
   \   0000002A   0xDA06             BGE.N    ??image__uncompress_2
   \   0000002C   0xF9B0 0x2002      LDRSH    R2,[R0, #+2]
   \   00000030   0xF9B1 0x4002      LDRSH    R4,[R1, #+2]
   \   00000034   0xFB92 0xF4F4      SDIV     R4,R2,R4
   \   00000038   0xE000             B.N      ??image__uncompress_3
   \                     ??image__uncompress_2: (+1)
   \   0000003A   0x2401             MOVS     R4,#+1
     47          
     48          	for (row = 0; row < img->nrows && row * rstep < com->nrows; row++)
   \                     ??image__uncompress_3: (+1)
   \   0000003C   0x2500             MOVS     R5,#+0
   \   0000003E   0xE000             B.N      ??image__uncompress_4
   \                     ??image__uncompress_5: (+1)
   \   00000040   0x1C6D             ADDS     R5,R5,#+1
   \                     ??image__uncompress_4: (+1)
   \   00000042   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   0xF9B1 0x2000      LDRSH    R2,[R1, #+0]
   \   00000048   0x4295             CMP      R5,R2
   \   0000004A   0xDA46             BGE.N    ??image__uncompress_6
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   0xFB03 0xF205      MUL      R2,R3,R5
   \   00000054   0xF9B0 0x6000      LDRSH    R6,[R0, #+0]
   \   00000058   0x42B2             CMP      R2,R6
   \   0000005A   0xDA3E             BGE.N    ??image__uncompress_6
     49          		for (col = 0; col < img->ncols && col * cstep < com->ncols; col++)
   \   0000005C   0x2600             MOVS     R6,#+0
   \                     ??image__uncompress_7: (+1)
   \   0000005E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000060   0xF9B1 0x2002      LDRSH    R2,[R1, #+2]
   \   00000064   0x4296             CMP      R6,R2
   \   00000066   0xDAEB             BGE.N    ??image__uncompress_5
   \   00000068   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000006A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000006C   0xFB04 0xF206      MUL      R2,R4,R6
   \   00000070   0xF9B0 0x7002      LDRSH    R7,[R0, #+2]
   \   00000074   0x42BA             CMP      R2,R7
   \   00000076   0xDAE3             BGE.N    ??image__uncompress_5
     50          			img->data[row*img->ncols+col] = (compressed__idx(com, row*rstep, col*cstep)?0xff:0);
   \   00000078   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000007C   0xFB04 0xF706      MUL      R7,R4,R6
   \   00000080   0xF05F 0x0C08      MOVS     R12,#+8
   \   00000084   0xF8D0 0xE004      LDR      LR,[R0, #+4]
   \   00000088   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000008C   0xFB03 0xF805      MUL      R8,R3,R5
   \   00000090   0xF9B0 0x9002      LDRSH    R9,[R0, #+2]
   \   00000094   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000096   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000098   0xFB04 0xF206      MUL      R2,R4,R6
   \   0000009C   0xFB09 0x2808      MLA      R8,R9,R8,R2
   \   000000A0   0xEA5F 0x08E8      ASRS     R8,R8,#+3
   \   000000A4   0xF81E 0x2008      LDRB     R2,[LR, R8]
   \   000000A8   0xF05F 0x0E80      MOVS     LR,#+128
   \   000000AC   0xFB97 0xF8FC      SDIV     R8,R7,R12
   \   000000B0   0xFB0C 0x7718      MLS      R7,R12,R8,R7
   \   000000B4   0xFA5E 0xFE07      ASRS     LR,LR,R7
   \   000000B8   0xEA12 0x0F0E      TST      R2,LR
   \   000000BC   0xD101             BNE.N    ??image__uncompress_8
   \                     ??image__uncompress_9: (+1)
   \   000000BE   0x2200             MOVS     R2,#+0
   \   000000C0   0xE000             B.N      ??image__uncompress_10
   \                     ??image__uncompress_8: (+1)
   \   000000C2   0x22FF             MOVS     R2,#+255
   \                     ??image__uncompress_10: (+1)
   \   000000C4   0x684F             LDR      R7,[R1, #+4]
   \   000000C6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C8   0xF9B1 0xC002      LDRSH    R12,[R1, #+2]
   \   000000CC   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CE   0xFB0C 0x6C05      MLA      R12,R12,R5,R6
   \   000000D2   0xF807 0x200C      STRB     R2,[R7, R12]
   \   000000D6   0x1C76             ADDS     R6,R6,#+1
   \   000000D8   0xE7C1             B.N      ??image__uncompress_7
     51          }
   \                     ??image__uncompress_6: (+1)
   \   000000DA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void image__compress(compressed_t *com, image_t * img){
   \                     image__compress: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     54          	uint16_t row, col;
     55          	ASSERT(com->nrows == img->nrows && com->ncols && img->ncols);
   \   00000008   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   0000000C   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD107             BNE.N    ??image__compress_0
   \   00000014   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??image__compress_0
   \   0000001C   0xF9B5 0x0002      LDRSH    R0,[R5, #+2]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD103             BNE.N    ??image__compress_1
   \                     ??image__compress_0: (+1)
   \   00000024   0x2137             MOVS     R1,#+55
   \   00000026   0x....             LDR.N    R0,??DataTable4
   \   00000028   0x.... 0x....      BL       assert_failed
     56          	for(row = 0; row < img->nrows; row++){
   \                     ??image__compress_1: (+1)
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0xE000             B.N      ??image__compress_2
   \                     ??image__compress_3: (+1)
   \   00000030   0x1C52             ADDS     R2,R2,#+1
   \                     ??image__compress_2: (+1)
   \   00000032   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000034   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   00000038   0x4282             CMP      R2,R0
   \   0000003A   0xDA58             BGE.N    ??image__compress_4
     57          		for(col = 0; col<img->ncols; col++){
   \   0000003C   0x2000             MOVS     R0,#+0
   \                     ??image__compress_5: (+1)
   \   0000003E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   0xF9B5 0x1002      LDRSH    R1,[R5, #+2]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xDAF3             BGE.N    ??image__compress_3
     58          			if(img->data[row*img->ncols+col]) compressed__set(com, row, col);
   \   00000048   0x6869             LDR      R1,[R5, #+4]
   \   0000004A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004C   0xF9B5 0x3002      LDRSH    R3,[R5, #+2]
   \   00000050   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000052   0xFB03 0x0302      MLA      R3,R3,R2,R0
   \   00000056   0x5CC9             LDRB     R1,[R1, R3]
   \   00000058   0x2900             CMP      R1,#+0
   \   0000005A   0xD123             BNE.N    ??image__compress_6
     59          			else compressed__clr(com, row, col);
   \                     ??image__compress_7: (+1)
   \   0000005C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   0x0001             MOVS     R1,R0
   \   00000060   0x2308             MOVS     R3,#+8
   \   00000062   0x6866             LDR      R6,[R4, #+4]
   \   00000064   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000066   0xF9B4 0x7002      LDRSH    R7,[R4, #+2]
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0xFB07 0x0702      MLA      R7,R7,R2,R0
   \   00000070   0x10FF             ASRS     R7,R7,#+3
   \   00000072   0xF8D4 0xC004      LDR      R12,[R4, #+4]
   \   00000076   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000078   0xF9B4 0xE002      LDRSH    LR,[R4, #+2]
   \   0000007C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007E   0xFB0E 0x0E02      MLA      LR,LR,R2,R0
   \   00000082   0xEA5F 0x0EEE      ASRS     LR,LR,#+3
   \   00000086   0xF81C 0xC00E      LDRB     R12,[R12, LR]
   \   0000008A   0xF05F 0x0E80      MOVS     LR,#+128
   \   0000008E   0xFB91 0xF8F3      SDIV     R8,R1,R3
   \   00000092   0xFB03 0x1118      MLS      R1,R3,R8,R1
   \   00000096   0xFA5E 0xFE01      ASRS     LR,LR,R1
   \   0000009A   0xEA3C 0x0C0E      BICS     R12,R12,LR
   \   0000009E   0xF806 0xC007      STRB     R12,[R6, R7]
   \   000000A2   0xE022             B.N      ??image__compress_8
   \                     ??image__compress_6: (+1)
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0x0001             MOVS     R1,R0
   \   000000A8   0x2308             MOVS     R3,#+8
   \   000000AA   0x6866             LDR      R6,[R4, #+4]
   \   000000AC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AE   0xF9B4 0x7002      LDRSH    R7,[R4, #+2]
   \   000000B2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   0xFB07 0x0702      MLA      R7,R7,R2,R0
   \   000000B8   0x10FF             ASRS     R7,R7,#+3
   \   000000BA   0xF8D4 0xC004      LDR      R12,[R4, #+4]
   \   000000BE   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000C0   0xF9B4 0xE002      LDRSH    LR,[R4, #+2]
   \   000000C4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000C6   0xFB0E 0x0E02      MLA      LR,LR,R2,R0
   \   000000CA   0xEA5F 0x0EEE      ASRS     LR,LR,#+3
   \   000000CE   0xF81C 0xC00E      LDRB     R12,[R12, LR]
   \   000000D2   0xF05F 0x0E80      MOVS     LR,#+128
   \   000000D6   0xFB91 0xF8F3      SDIV     R8,R1,R3
   \   000000DA   0xFB03 0x1118      MLS      R1,R3,R8,R1
   \   000000DE   0xFA5E 0xFE01      ASRS     LR,LR,R1
   \   000000E2   0xEA5E 0x0C0C      ORRS     R12,LR,R12
   \   000000E6   0xF806 0xC007      STRB     R12,[R6, R7]
     60          		}
   \                     ??image__compress_8: (+1)
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0xE7A7             B.N      ??image__compress_5
     61          	}
     62          }
   \                     ??image__compress_4: (+1)
   \   000000EE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x46 0x3A          DC8 "F:\\K60_CAR_2018\\lib\\peripheral\\image.c"
   \              0x5C 0x4B    
   \              0x36 0x30    
   \              0x5F 0x43    
   \              0x41 0x52    
   \              0x5F 0x32    
   \              0x30 0x31    
   \              0x38 0x5C    
   \              0x6C 0x69    
   \              0x62 0x5C    
   \              0x70 0x65    
   \              0x72 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x61 0x6C    
   \              0x5C 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x2E 0x63    
   \              0x00         
   \   00000027   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   compressed__ctor
        16   -> assert_failed
        16   -> malloc
       8   compressed__dtor
         8   -> assert_failed
         8   -> free
      24   image__compress
        24   -> assert_failed
      16   image__ctor
        16   -> assert_failed
        16   -> malloc
       8   image__dtor
         8   -> assert_failed
         8   -> free
      28   image__uncompress


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      40  ?_0
      56  compressed__ctor
      50  compressed__dtor
     242  image__compress
      54  image__ctor
      50  image__dtor
     222  image__uncompress

 
  40 bytes in section .rodata
 678 bytes in section .text
 
 678 bytes of CODE  memory
  40 bytes of CONST memory

Errors: none
Warnings: none
