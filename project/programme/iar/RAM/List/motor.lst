###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       29/Jan/2018  14:27:48
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\K60_CAR_2018\lib\peripheral\motor.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EW91CE.tmp
#        (F:\K60_CAR_2018\lib\peripheral\motor.c -D LPLD_K60 -D USE_K60DZ10
#        -lCN F:\K60_CAR_2018\project\programme\iar\RAM\List -lB
#        F:\K60_CAR_2018\project\programme\iar\RAM\List -o
#        F:\K60_CAR_2018\project\programme\iar\RAM\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\K60_CAR_2018\project\programme\iar\..\app\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\CPU\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\common\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\HW\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\DEV\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\LPLD\FUNC\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\uCOS-II\Ports\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\uCOS-II\Source\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\FatFs\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\FatFs\option\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\common\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\driver\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\descriptor\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\USB\class\ -I
#        F:\K60_CAR_2018\project\programme\iar\..\..\..\lib\peripheral\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  F:\K60_CAR_2018\project\programme\iar\RAM\List\motor.lst
#    Object file  =  F:\K60_CAR_2018\project\programme\iar\RAM\Obj\motor.o
#
###############################################################################

F:\K60_CAR_2018\lib\peripheral\motor.c
      1          #include "motor.h"
      2          #include <math.h>
      3          

   \                                 In section .bss, align 4
      4          static motor_control_t *mtrctrl;
   \                     mtrctrl:
   \   00000000                      DS8 4
      5          

   \                                 In section .bss, align 4
      6          static uint32 average_num=0;
   \                     average_num:
   \   00000000                      DS8 4
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void pit_motor_control(void){
   \                     pit_motor_control: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      9            static uint32 pit_enter_counter;
     10            static uint16 placc_temp_value[2];
     11            do{
     12                placc_temp_value[0] = LPLD_LPTMR_GetPulseAcc();
   \                     ??pit_motor_control_0: (+1)
   \   00000002   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   00000006   0x....             LDR.N    R1,??DataTable4
   \   00000008   0x8008             STRH     R0,[R1, #+0]
     13                placc_temp_value[1] = LPLD_LPTMR_GetPulseAcc();
   \   0000000A   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   0000000E   0x....             LDR.N    R1,??DataTable4
   \   00000010   0x8048             STRH     R0,[R1, #+2]
     14            }while(abs_diff(placc_temp_value[0], placc_temp_value[1])>1);
   \   00000012   0x....             LDR.N    R0,??DataTable4
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x....             LDR.N    R1,??DataTable4
   \   00000018   0x8849             LDRH     R1,[R1, #+2]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD305             BCC.N    ??pit_motor_control_1
   \   0000001E   0x....             LDR.N    R0,??DataTable4
   \   00000020   0x8801             LDRH     R1,[R0, #+0]
   \   00000022   0x....             LDR.N    R0,??DataTable4
   \   00000024   0x8840             LDRH     R0,[R0, #+2]
   \   00000026   0x1A08             SUBS     R0,R1,R0
   \   00000028   0xE004             B.N      ??pit_motor_control_2
   \                     ??pit_motor_control_1: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable4
   \   0000002C   0x8841             LDRH     R1,[R0, #+2]
   \   0000002E   0x....             LDR.N    R0,??DataTable4
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0x1A08             SUBS     R0,R1,R0
   \                     ??pit_motor_control_2: (+1)
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xDAE4             BGE.N    ??pit_motor_control_0
     15            
     16            //switch(0){
     17             // case 0:
     18                  mtrctrl->ecdlft.value = placc_temp_value[1];
   \   00000038   0x....             LDR.N    R0,??DataTable4
   \   0000003A   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   0000003E   0x....             LDR.N    R1,??DataTable4_1
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xF8A1 0x0078      STRH     R0,[R1, #+120]
     19             //     break;
     20             // case 1:
     21                  mtrctrl->ecdrgt.value  = placc_temp_value[1];
   \   00000046   0x....             LDR.N    R0,??DataTable4
   \   00000048   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   0000004C   0x....             LDR.N    R1,??DataTable4_1
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xF8A1 0x0080      STRH     R0,[R1, #+128]
     22             //     break;
     23            //}
     24           
     25            
     26          
     27            mtrctrl->ecdlft.mileage += mtrctrl->ecdlft.value;
   \   00000054   0x....             LDR.N    R0,??DataTable4_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF9B0 0x0078      LDRSH    R0,[R0, #+120]
   \   0000005C   0x....             LDR.N    R1,??DataTable4_1
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x6FC9             LDR      R1,[R1, #+124]
   \   00000062   0xFA01 0xF080      SXTAH    R0,R1,R0
   \   00000066   0x....             LDR.N    R1,??DataTable4_1
   \   00000068   0x6809             LDR      R1,[R1, #+0]
   \   0000006A   0x67C8             STR      R0,[R1, #+124]
     28            mtrctrl->ecdrgt.mileage += mtrctrl->ecdrgt.value;
   \   0000006C   0x....             LDR.N    R0,??DataTable4_1
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF9B0 0x0080      LDRSH    R0,[R0, #+128]
   \   00000074   0x....             LDR.N    R1,??DataTable4_1
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0xF8D1 0x1084      LDR      R1,[R1, #+132]
   \   0000007C   0xFA01 0xF080      SXTAH    R0,R1,R0
   \   00000080   0x....             LDR.N    R1,??DataTable4_1
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0xF8C1 0x0084      STR      R0,[R1, #+132]
     29            
     30            average_num= mtrctrl->ecdlft.mileage;
   \   00000088   0x....             LDR.N    R0,??DataTable4_1
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x6FC0             LDR      R0,[R0, #+124]
   \   0000008E   0x....             LDR.N    R1,??DataTable4_2
   \   00000090   0x6008             STR      R0,[R1, #+0]
     31            pit_enter_counter++;
   \   00000092   0x....             LDR.N    R0,??DataTable4_3
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x....             LDR.N    R1,??DataTable4_3
   \   0000009A   0x6008             STR      R0,[R1, #+0]
     32            
     33          //µ¥¹â±àcounterÇåÁã
     34            LPTMR0->CSR&=(~LPTMR_CSR_TEN_MASK); 
   \   0000009C   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40040000
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x0840             LSRS     R0,R0,#+1
   \   000000A2   0x0040             LSLS     R0,R0,#+1
   \   000000A4   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40040000
   \   000000A6   0x6008             STR      R0,[R1, #+0]
     35            LPTMR0->CSR |= LPTMR_CSR_TEN_MASK;  
   \   000000A8   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40040000
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000B0   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40040000
   \   000000B2   0x6008             STR      R0,[R1, #+0]
     36          }
   \   000000B4   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     `pit_motor_control::pit_enter_counter`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     `pit_motor_control::placc_temp_value`:
   \   00000000                      DS8 4
     37            

   \                                 In section .text, align 2, keep-with-next
     38          void motor_control__set_duty(motor_sel_t sel,int32 duty){
   \                     motor_control__set_duty: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000A             MOVS     R2,R1
     39            motor_chn_t ch_0,ch_1;
     40            
     41            switch(sel){
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD002             BEQ.N    ??motor_control__set_duty_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD030             BEQ.N    ??motor_control__set_duty_1
   \   0000000E   0xE037             B.N      ??motor_control__set_duty_2
     42            case  Left_Motor:
     43              if(duty>=0){
   \                     ??motor_control__set_duty_0: (+1)
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD402             BMI.N    ??motor_control__set_duty_3
     44                  ch_0=Motor_LR;
   \   00000014   0x2401             MOVS     R4,#+1
     45                  ch_1=Motor_LF;
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0xE001             B.N      ??motor_control__set_duty_4
     46              }else{
     47                  ch_0=Motor_LF;
   \                     ??motor_control__set_duty_3: (+1)
   \   0000001A   0x2400             MOVS     R4,#+0
     48                  ch_1=Motor_LR;       
   \   0000001C   0x2301             MOVS     R3,#+1
     49              }
     50              break;
     51            case Right_Motor:
     52              if(duty>=0){
     53                  ch_0=Motor_RR;
     54                  ch_1=Motor_RF;
     55              }else{
     56                  ch_0=Motor_RF;
     57                  ch_1=Motor_RR;       
     58              }
     59              break;
     60            default:return;
     61            }
     62            
     63            if(duty<0) duty=-duty;
   \                     ??motor_control__set_duty_4: (+1)
   \                     ??motor_control__set_duty_5: (+1)
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD500             BPL.N    ??motor_control__set_duty_6
   \   00000022   0x4252             RSBS     R2,R2,#+0
     64            
     65              LPLD_FTM_PWM_ChangeDuty(mtrctrl->mtrcfg[ch_1].FTMn, mtrctrl->mtrcfg[ch_1].FTM_Chn, duty);
   \                     ??motor_control__set_duty_6: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable4_1
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002A   0x210C             MOVS     R1,#+12
   \   0000002C   0xFB01 0xF103      MUL      R1,R1,R3
   \   00000030   0x4408             ADD      R0,R0,R1
   \   00000032   0x7C01             LDRB     R1,[R0, #+16]
   \   00000034   0x....             LDR.N    R0,??DataTable4_1
   \   00000036   0x6805             LDR      R5,[R0, #+0]
   \   00000038   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003A   0x200C             MOVS     R0,#+12
   \   0000003C   0x4343             MULS     R3,R0,R3
   \   0000003E   0xEB05 0x0003      ADD      R0,R5,R3
   \   00000042   0x68C0             LDR      R0,[R0, #+12]
   \   00000044   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     66              LPLD_FTM_PWM_ChangeDuty(mtrctrl->mtrcfg[ch_0].FTMn, mtrctrl->mtrcfg[ch_0].FTM_Chn, 0);
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x....             LDR.N    R0,??DataTable4_1
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x210C             MOVS     R1,#+12
   \   00000052   0xFB01 0xF104      MUL      R1,R1,R4
   \   00000056   0x4408             ADD      R0,R0,R1
   \   00000058   0x7C01             LDRB     R1,[R0, #+16]
   \   0000005A   0x....             LDR.N    R0,??DataTable4_1
   \   0000005C   0x6803             LDR      R3,[R0, #+0]
   \   0000005E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000060   0x200C             MOVS     R0,#+12
   \   00000062   0x4344             MULS     R4,R0,R4
   \   00000064   0xEB03 0x0004      ADD      R0,R3,R4
   \   00000068   0x68C0             LDR      R0,[R0, #+12]
   \   0000006A   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     67          }
   \                     ??motor_control__set_duty_7: (+1)
   \   0000006E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \                     ??motor_control__set_duty_1: (+1)
   \   00000070   0x2A00             CMP      R2,#+0
   \   00000072   0xD402             BMI.N    ??motor_control__set_duty_8
   \   00000074   0x2403             MOVS     R4,#+3
   \   00000076   0x2302             MOVS     R3,#+2
   \   00000078   0xE001             B.N      ??motor_control__set_duty_9
   \                     ??motor_control__set_duty_8: (+1)
   \   0000007A   0x2402             MOVS     R4,#+2
   \   0000007C   0x2303             MOVS     R3,#+3
   \                     ??motor_control__set_duty_9: (+1)
   \   0000007E   0xE7CE             B.N      ??motor_control__set_duty_5
   \                     ??motor_control__set_duty_2: (+1)
   \   00000080   0xE7F5             B.N      ??motor_control__set_duty_7
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void motor_control__enable(){
   \                     motor_control__enable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70              LPLD_PIT_EnableIrq(mtrctrl->pit_init_param);
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000014   0xBC0F             POP      {R0-R3}
   \   00000016   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     71          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void motor_control__disable(){
   \                     motor_control__disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     74              LPLD_PIT_DisableIrq(mtrctrl->pit_init_param);
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2214             MOVS     R2,#+20
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000014   0xBC0F             POP      {R0-R3}
   \   00000016   0x.... 0x....      BL       LPLD_PIT_DisableIrq
     75          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void motor_control__config(motor_control_t *mtrctrl_usr){
   \                     motor_control__config: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     78            mtrctrl=mtrctrl_usr;
   \   00000002   0x....             LDR.N    R1,??DataTable4_1
   \   00000004   0x6008             STR      R0,[R1, #+0]
     79            int8 i;
     80            //PIT
     81            memset(&(mtrctrl->pit_init_param),0,sizeof(PIT_InitTypeDef));
   \   00000006   0x2214             MOVS     R2,#+20
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R0,??DataTable4_1
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x303C             ADDS     R0,R0,#+60
   \   00000010   0x.... 0x....      BL       memset
     82            mtrctrl->pit_init_param.PIT_Pitx=mtrctrl->pit;
   \   00000014   0x....             LDR.N    R0,??DataTable4_1
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable4_1
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF881 0x003C      STRB     R0,[R1, #+60]
     83            mtrctrl->pit_init_param.PIT_PeriodMs=mtrctrl->period_ms;
   \   00000022   0x....             LDR.N    R0,??DataTable4_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x....             LDR.N    R1,??DataTable4_1
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x6448             STR      R0,[R1, #+68]
     84            mtrctrl->pit_init_param.PIT_Isr=pit_motor_control;
   \   0000002E   0x....             LDR.N    R0,??DataTable4_5
   \   00000030   0x....             LDR.N    R1,??DataTable4_1
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x64C8             STR      R0,[R1, #+76]
     85            LPLD_PIT_Init(mtrctrl->pit_init_param);
   \   00000036   0x....             LDR.N    R0,??DataTable4_1
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF110 0x013C      ADDS     R1,R0,#+60
   \   0000003E   0xB084             SUB      SP,SP,#+16
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x2214             MOVS     R2,#+20
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0F             POP      {R0-R3}
   \   0000004A   0x.... 0x....      BL       LPLD_PIT_Init
     86            
     87            //LPTMR
     88            memset(&(mtrctrl->lptmr_init_param),0,sizeof(LPTMR_InitTypeDef));
   \   0000004E   0x220C             MOVS     R2,#+12
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x....             LDR.N    R0,??DataTable4_1
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x3050             ADDS     R0,R0,#+80
   \   00000058   0x.... 0x....      BL       memset
     89            mtrctrl->lptmr_init_param.LPTMR_Mode =LPTMR_MODE_PLACC;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x....             LDR.N    R1,??DataTable4_1
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF881 0x0050      STRB     R0,[R1, #+80]
     90          
     91            mtrctrl->lptmr_init_param.LPTMR_PluseAccInput =mtrctrl->ecd_rgt.LPTMR_ALTn;
   \   00000066   0x....             LDR.N    R0,??DataTable4_1
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x7A40             LDRB     R0,[R0, #+9]
   \   0000006C   0x....             LDR.N    R1,??DataTable4_1
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0xF881 0x0054      STRB     R0,[R1, #+84]
     92            LPLD_LPTMR_Init(mtrctrl->lptmr_init_param);
   \   00000074   0x....             LDR.N    R0,??DataTable4_1
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x3050             ADDS     R0,R0,#+80
   \   0000007A   0xC807             LDM      R0,{R0-R2}
   \   0000007C   0x.... 0x....      BL       LPLD_LPTMR_Init
     93              mtrctrl->lptmr_init_param.LPTMR_PluseAccInput =mtrctrl->ecd_lft.LPTMR_ALTn;
   \   00000080   0x....             LDR.N    R0,??DataTable4_1
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x7A00             LDRB     R0,[R0, #+8]
   \   00000086   0x....             LDR.N    R1,??DataTable4_1
   \   00000088   0x6809             LDR      R1,[R1, #+0]
   \   0000008A   0xF881 0x0054      STRB     R0,[R1, #+84]
     94            LPLD_LPTMR_Init(mtrctrl->lptmr_init_param);
   \   0000008E   0x....             LDR.N    R0,??DataTable4_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x3050             ADDS     R0,R0,#+80
   \   00000094   0xC807             LDM      R0,{R0-R2}
   \   00000096   0x.... 0x....      BL       LPLD_LPTMR_Init
     95            
     96            //mile
     97            mtrctrl->ecdlft.mileage=0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x....             LDR.N    R1,??DataTable4_1
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x67C8             STR      R0,[R1, #+124]
     98            mtrctrl->ecdrgt.mileage=0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR.N    R1,??DataTable4_1
   \   000000A6   0x6809             LDR      R1,[R1, #+0]
   \   000000A8   0xF8C1 0x0084      STR      R0,[R1, #+132]
     99            
    100            //ftm
    101            memset(&(mtrctrl->motor_init_param),0,sizeof(FTM_InitTypeDef));
   \   000000AC   0x221C             MOVS     R2,#+28
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x....             LDR.N    R0,??DataTable4_1
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x305C             ADDS     R0,R0,#+92
   \   000000B6   0x.... 0x....      BL       memset
    102            for(i=0;i<Motor_LEN;i++){
   \   000000BA   0x2400             MOVS     R4,#+0
   \   000000BC   0xE044             B.N      ??motor_control__config_0
    103              mtrctrl->motor_init_param.FTM_Ftmx=mtrctrl->mtrcfg[i].FTMn;
   \                     ??motor_control__config_1: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable4_1
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000C4   0x210C             MOVS     R1,#+12
   \   000000C6   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   000000CA   0x4408             ADD      R0,R0,R1
   \   000000CC   0x68C0             LDR      R0,[R0, #+12]
   \   000000CE   0x....             LDR.N    R1,??DataTable4_1
   \   000000D0   0x6809             LDR      R1,[R1, #+0]
   \   000000D2   0x65C8             STR      R0,[R1, #+92]
    104              mtrctrl->motor_init_param.FTM_Mode=FTM_MODE_PWM;
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x....             LDR.N    R1,??DataTable4_1
   \   000000D8   0x6809             LDR      R1,[R1, #+0]
   \   000000DA   0xF881 0x0060      STRB     R0,[R1, #+96]
    105              mtrctrl->motor_init_param.FTM_PwmFreq=mtrctrl->mtrcfg[i].freq;
   \   000000DE   0x....             LDR.N    R0,??DataTable4_1
   \   000000E0   0x6800             LDR      R0,[R0, #+0]
   \   000000E2   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000E4   0x210C             MOVS     R1,#+12
   \   000000E6   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   000000EA   0x4408             ADD      R0,R0,R1
   \   000000EC   0x6940             LDR      R0,[R0, #+20]
   \   000000EE   0x....             LDR.N    R1,??DataTable4_1
   \   000000F0   0x6809             LDR      R1,[R1, #+0]
   \   000000F2   0x6648             STR      R0,[R1, #+100]
    106              LPLD_FTM_Init(mtrctrl->motor_init_param);
   \   000000F4   0x....             LDR.N    R0,??DataTable4_1
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0xF110 0x015C      ADDS     R1,R0,#+92
   \   000000FC   0xB084             SUB      SP,SP,#+16
   \   000000FE   0x4668             MOV      R0,SP
   \   00000100   0x221C             MOVS     R2,#+28
   \   00000102   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000106   0xBC0F             POP      {R0-R3}
   \   00000108   0x.... 0x....      BL       LPLD_FTM_Init
    107              LPLD_FTM_PWM_Enable(mtrctrl->mtrcfg[i].FTMn,
    108                                  mtrctrl->mtrcfg[i].FTM_Chn,
    109                                  0,
    110                                  mtrctrl->mtrcfg[i].PTXn,
    111                                  ALIGN_LEFT
    112                                  );
   \   0000010C   0x2028             MOVS     R0,#+40
   \   0000010E   0x9000             STR      R0,[SP, #+0]
   \   00000110   0x....             LDR.N    R0,??DataTable4_1
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000116   0x210C             MOVS     R1,#+12
   \   00000118   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   0000011C   0x4408             ADD      R0,R0,R1
   \   0000011E   0x7C43             LDRB     R3,[R0, #+17]
   \   00000120   0x2200             MOVS     R2,#+0
   \   00000122   0x....             LDR.N    R0,??DataTable4_1
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000128   0x210C             MOVS     R1,#+12
   \   0000012A   0xFB14 0xF101      SMULBB   R1,R4,R1
   \   0000012E   0x4408             ADD      R0,R0,R1
   \   00000130   0x7C01             LDRB     R1,[R0, #+16]
   \   00000132   0x....             LDR.N    R0,??DataTable4_1
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000138   0x250C             MOVS     R5,#+12
   \   0000013A   0xFB14 0xF505      SMULBB   R5,R4,R5
   \   0000013E   0x4428             ADD      R0,R0,R5
   \   00000140   0x68C0             LDR      R0,[R0, #+12]
   \   00000142   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
    113            }
   \   00000146   0x1C64             ADDS     R4,R4,#+1
   \                     ??motor_control__config_0: (+1)
   \   00000148   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000014A   0x2C04             CMP      R4,#+4
   \   0000014C   0xDBB7             BLT.N    ??motor_control__config_1
    114          }
   \   0000014E   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     `pit_motor_control::placc_temp_value`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     mtrctrl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     average_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     `pit_motor_control::pit_enter_counter`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     pit_motor_control

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   motor_control__config
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_PWM_Enable
        24   -> LPLD_LPTMR_Init
        24   -> LPLD_PIT_Init
        40   -> __aeabi_memcpy4
        24   -> memset
      24   motor_control__disable
         8   -> LPLD_PIT_DisableIrq
        24   -> __aeabi_memcpy4
      24   motor_control__enable
         8   -> LPLD_PIT_EnableIrq
        24   -> __aeabi_memcpy4
      16   motor_control__set_duty
        16   -> LPLD_FTM_PWM_ChangeDuty
       8   pit_motor_control
         8   -> LPLD_LPTMR_GetPulseAcc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  average_num
     336  motor_control__config
      28  motor_control__disable
      28  motor_control__enable
     130  motor_control__set_duty
       4  mtrctrl
       4  pit_enter_counter
     182  pit_motor_control
       4  placc_temp_value

 
  16 bytes in section .bss
 728 bytes in section .text
 
 728 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: 3
